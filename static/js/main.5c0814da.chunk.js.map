{"version":3,"sources":["layout/Header/index.js","layout/Footer/index.js","pages/Home/index.js","web3/getWeb3.js","web3/getContracts.js","web3/EthersContext.js","pages/TokenList/index.js","utils/localStorage.js","components/forms/DeployNewToken/index.js","pages/Deploy/index.js","components/TokenMeta/index.js","components/forms/CreateCertificateType/index.js","web3/web3Utils.js","components/forms/CreateCertificate/index.js","components/Dropzone/index.js","components/forms/RedeemCertificate/index.js","pages/Token/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Footer","Home","Component","getWeb3","Promise","resolve","reject","window","addEventListener","a","async","ethereum","console","log","web3","Web3","enable","provider","providers","HttpProvider","getContracts","networkId","exampleCoin","ExampleCoinRinkeby","address","networks","Context","React","createContext","MyWeb3Provider","props","gatherData","bind","state","loaded","gameList","refresh","this","setState","gameEvent","games","ethers","Web3Provider","currentProvider","eth","getAccounts","accounts","getNetwork","network","chainId","signer","getSigner","contracts","exampleCoinJSON","exampleCoinFactory","ContractFactory","abi","bytecode","exampleCoinContract","Contract","setLoaded","alert","error","Provider","value","children","MyWeb3Consumer","Consumer","Dapp","upsertStringToLocalStorageArray","name","localStorage","getItem","array","JSON","parse","includes","push","setItem","stringify","CreateForm","submitTransaction","symbol","decimalUnits","cap","waiting","factory","deploy","contract","deployTransaction","wait","document","getElementById","id","reset","price","showOther","handleChange","handleSubmit","event","target","preventDefault","onSubmit","type","onChange","Admin","DeployNewToken","Token","componentDidMount","loadContract","contractLoaded","loadingMessage","owner","totalSupply","supply","balanceOf","selectedAddress","balance","toString","amount","delegates","metadata","createCertificateType","notOwner","addNewDelegateField","ownerAddress","toLowerCase","disabled","decodeLogs","logs","contractEventsInterface","result","i","cleaned","decoded","decode","data","topics","inputs","forEach","input","startsWith","x","length","arrayify","utils","selectedCertificateId","getCertificateHash","recipient","cHash","certHashBytes","signMessage","signature","signedCertificate","certificateId","isCertSigned","certificates","downloadCert","getLogs","filter","filters","CertificateTypeCreated","fromBlock","contractEventInterface","interface","events","decodedLogs","getCertificateData","dataString","cert","meta","getDelegateSelector","blob","Blob","url","URL","createObjectURL","createElement","href","download","click","selectorList","c","d","key","map","idx","onClick","Dropzone","hightlight","fileInputRef","createRef","openFileDialog","onFilesAdded","onDragOver","onDragLeave","onDrop","current","evt","addedhightlight","files","fileListToArray","dataTransfer","list","item","style","cursor","ref","alt","src","certJsonTextArea","redeemCertificate","certJson","successfullyUploaded","handleFileDrop","err","file","text","s","json","rows","cols","getCode","templateAddress","templateCode","tokenAddress","code","TokenMeta","RedeemCertificate","ChooseToken","selectorTokens","coinABI","selectorTokenChoice","afterMount","addToken","tokenAddressArray","t","token","location","getSelector","TokenConsumer","tokenId","App","path","TokenList","Deploy","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c0814da.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"@reach/router\"\nimport \"./index.css\"\n//import Balance from \"../../components/Balance\"\n\n\nfunction Header() {\n  return (\n\n    <div>\n      <header>\n        <div className=\"header-div\">\n          <Link className=\"nav-item nav-link\" to=\"/\"><button className=\"btn-primary\">Home</button></Link>\n          <Link className=\"nav-item nav-link\" to=\"/deploy\"><button className=\"btn-secondary\">Deploy</button></Link>\n          <Link className=\"nav-item nav-link\" to=\"/token\"><button className=\"btn-secondary\">Token</button></Link>\n        </div>\n        {/* <div className=\"balance-tab\">\n            <Balance />\n          </div> */}\n      </header>\n    </div>\n\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport \"./index.css\"\n\nfunction Footer() {\n  return (\n    <div>\n      <footer>\n        <div className=\"footer-div\">\n          <p className=\"copyright\">\t&copy; Rapid 2020</p>\n        </div>\n      </footer>\n    </div>\n\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { Link } from \"@reach/router\"\n\n\nclass Home extends Component {\n    render() {\n        return (\n          <div>\n            <h1>Home Page</h1>\n            <h2>Hello and welcome</h2>\n            <p>This is the certificates Dapp, it does x, y and z. Its a pretty cool dapp, I'll explain how it works eventually but for now this filler text will have to suffice.</p>\n          </div>\n        );\n      }\n}\n\nexport default Home;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        console.log(\"Modern Web3\")\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        console.log(\"Legacy Web3\")\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","\nimport ExampleCoinRinkeby from \"../contracts/rinkeby/ExampleCoin.json\";\n\nconst getContracts = (networkId) => {\n    let exampleCoin;\n\n    if (networkId === 4) {\n        exampleCoin = ExampleCoinRinkeby\n        exampleCoin.address = exampleCoin.networks[4].address\n    }\n\n    return { exampleCoin }\n}\n\nexport default getContracts;\n","import React, { Component } from \"react\";\nimport {ethers} from 'ethers';\n\n\nimport getWeb3 from \"./getWeb3\";\nimport getContracts from \"./getContracts\";\n\n\nconst Context = React.createContext();\n\nexport class MyWeb3Provider extends Component {\n  constructor(props) {\n    super(props);\n    this.gatherData = this.gatherData.bind(this);\n\n    this.state = {\n      loaded: false,\n      gameList: [],\n      refresh: ()=> {},\n      web3: null\n    }\n  }\n  \n  setLoaded() {\n    this.setState({\n      loaded: true\n    })\n  }\n\n  addGameToList(gameEvent) {\n    //let game = event.returned\n    this.setState({\n      games: gameEvent\n    })\n  }\n  async componentDidMount() {\n    this.gatherData()\n  }\n\n  async componentDidUpdate() {\n\n  }\n\n  async gatherData() {\n    try {\n      // Get network provider and web3 instance\n      let web3\n      if (!this.state.web3){\n        web3 = await getWeb3();\n      } else {\n        web3 = this.state.web3\n      }\n\n      const provider = new ethers.providers.Web3Provider(web3.currentProvider)\n      console.log(provider)\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const network = await provider.getNetwork();\n      const networkId = network.chainId;\n      const signer = provider.getSigner();\n\n\n\n    //   let x = await signer.signMessage(\"hello\")\n    //   console.log(x)\n\n\n      const contracts = getContracts(networkId)\n      const exampleCoinJSON = contracts.exampleCoin\n\n      console.log(exampleCoinJSON)\n\n      let exampleCoinFactory = new ethers.ContractFactory(exampleCoinJSON.abi, exampleCoinJSON.bytecode, signer);\n\n      let exampleCoinContract = new ethers.Contract(exampleCoinJSON.address, exampleCoinJSON.abi, signer);\n\n    //   const deployedNetwork = TokenContract.networks[networkId];\n    //   const tokenContract = new web3.eth.Contract(\n    //     TokenContract.abi,\n    //     deployedNetwork && deployedNetwork.address,\n    //   );\n\n    //   const fbdeployedNetwork = FootballContract.networks[networkId];\n    //   const squaresContract = new web3.eth.Contract(\n    //     FootballContract.abi,\n    //     fbdeployedNetwork && fbdeployedNetwork.address,\n    //   );\n\n    //   const faucetdNetwork = FaucetContract.networks[networkId];\n    //   const faucetContract = new web3.eth.Contract(\n    //     FaucetContract.abi,\n    //     faucetdNetwork && faucetdNetwork.address,\n    //   );\n\n    //   squaresContract.events.GameCreated({\n    //     fromBlock: 0\n    //   }, (error, event) => {\n    //     let {gameId, owner, token, metadata} = event.returnValues\n    //     let g = {gameId, owner, token, metadata}        \n    //     this.setState({ gameList: [...this.state.gameList, g] }) //simple value\n    //   })\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, provider, signer, networkId, accounts, exampleCoinContract, exampleCoinFactory }, this.setLoaded);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n\n  }\n\n\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport const MyWeb3Consumer = Context.Consumer;\n\nexport default Context","import React from \"react\";\nimport { MyWeb3Consumer } from '../../web3/EthersContext';\n\nconst Dapp = (props) => (\n  <MyWeb3Consumer>\n    {({ loaded }) => {\n      if (!loaded) {\n        return (<div>Loading contracts from Context</div>)\n      }\n      return (\n        <div className=\"list-page\">\n          <h1>Token List Page</h1>\n          <div>\n\n          </div>\n        </div>\n      )\n    }}\n  </MyWeb3Consumer>\n);\n\nexport default Dapp;\n","export const upsertStringToLocalStorageArray = (name, value) => {\n    //first see if its empty\n    if (!localStorage.getItem(name)) {\n        console.log(\"local storage empty\")\n        //its empty\n        let array = JSON.stringify([value])\n        localStorage.setItem(name, array)\n    } else {\n        let array = JSON.parse(localStorage.getItem(name))\n        if (array.includes(value)){\n            return\n        }\n        array.push(value)\n        localStorage.setItem(name, JSON.stringify(array)) \n    }\n}\n\nexport const getLocalStorageArray = (name) => {\n    if (!localStorage.getItem(name)){\n        return []\n    }\n    return JSON.parse(localStorage.getItem(name))\n}\n","import React, { Component } from \"react\";\nimport {upsertStringToLocalStorageArray} from \"../../../utils/localStorage\"\nclass CreateForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: null,\n            name: null,\n            symbol: null,\n            decimalUnits: null,\n            cap: null,\n            price: null,\n            showOther: false,\n            waiting: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.submitTransaction()\n    }\n\n    submitTransaction = async () => {\n        const { name, symbol, decimalUnits, cap } = this.state\n\n        this.setState({waiting: true})\n        let contract = await this.props.factory.deploy(name, symbol, decimalUnits, cap)\n         \n        console.log(contract)\n        upsertStringToLocalStorageArray(\"CERTIFICATE_TOKEN_LIST\",contract.address)\n\n        await contract.deployTransaction.wait()\n        this.setState({waiting: false})\n\n        document.getElementById(this.props.id).reset();\n    };\n\n\n    render() {\n        return (\n            <form id={this.props.id} onSubmit={this.handleSubmit}>\n                <label>\n                    Token Name:\n            <input name=\"name\" type=\"text\" onChange={this.handleChange} />\n                </label>\n                <br></br>\n                <label>\n                    Token Symbol:\n            <input name=\"symbol\" type=\"text\" onChange={this.handleChange} />\n                </label>\n                <br></br>\n\n                <label>\n                    Decimal Units:\n            <input name=\"decimalUnits\" type=\"number\" onChange={this.handleChange} />\n                </label>\n                <br></br>\n                <label>\n                    Mint Cap:\n            <input name=\"cap\" type=\"number\" onChange={this.handleChange} />\n                </label>\n                <br></br>\n                {this.state.waiting ? <div>Please Wait While Token Deploys...</div> : <input type=\"submit\" value=\"Submit\" />}\n            </form>\n        );\n    }\n}\nexport default CreateForm;","import React, { Component } from \"react\";\nimport DeployNewToken from \"../../components/forms/DeployNewToken\"\nimport { MyWeb3Consumer } from \"../../web3/EthersContext\"\n\nclass Admin1 extends Component {\n\n    componentDidMount = async () => {\n        // console.log(\"create component\", this.props.tokenContract.options)\n    }\n\n    render() {\n        return (\n            <div>\n                <DeployNewToken />\n            </div>\n        );\n    }\n}\n\nconst Admin = (props) => (\n    <MyWeb3Consumer>\n        {({ loaded, exampleCoinContract, exampleCoinFactory }) => {\n            if (!loaded) {\n                return (<div>Loading form</div>)\n            }\n            return (\n                <div className=\"admin-page\">\n                    <h1>Admin Page</h1>\n                    <h3>Fill out the form below to create a new token</h3>\n                    <DeployNewToken id=\"new-token-form\" factory={exampleCoinFactory} />\n                </div>\n            )\n        }}\n    </MyWeb3Consumer>\n);\n\n\nexport default Admin;","import React, { Component } from \"react\";\n\nclass Token extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        contractLoaded: false,\n        loadingMessage: \"Loading Contract...\",\n        owner: null\n      };\n  \n    }\n    setLoaded() {\n      this.setState({\n        contractLoaded: true\n      })\n    }\n  \n    componentDidMount = async () => {\n      this.loadContract()\n    }\n  \n    async loadContract() {\n      try {\n\n        let symbol = await this.props.contract.symbol()\n        let name = await this.props.contract.name()\n        let owner = await this.props.contract.owner()\n        let supply = await this.props.contract.totalSupply()\n        let balance = await this.props.contract.balanceOf(window.ethereum.selectedAddress)\n        let cap = await this.props.contract.cap()\n\n  \n        console.log(supply.toString())\n        this.setState({ symbol, name, owner, supply: supply.toString(), balance: balance.toString(), cap: cap.toString() }, this.setLoaded)\n  \n      } catch (err) {\n        console.log(err)\n        this.setState({ loadingMessage: err.toString() })\n  \n      }\n    }\n  \n    render() {\n      if (!this.state.contractLoaded) {\n        return (<div>{this.state.loadingMessage}</div>)\n      }\n      return (\n        <div>\n          <label>Name:</label>\n          <span>{this.state.name}</span>\n          <br></br>\n          <label>Symbol:</label>\n          <span>{this.state.symbol}</span>\n          <br></br>\n          <label>Owner:</label>\n          <span>{this.state.owner}</span>\n          <br></br>\n          <label>Balance:</label>\n          <span>{this.state.balance}</span>\n          <br></br>\n          <label>Total Supply:</label>\n          <span>{this.state.supply}</span>\n          <br></br>\n          <label>Cap:</label>\n          <span>{this.state.cap}</span>\n          <br></br>\n        </div>\n      );\n    }\n  }\n\n  export default Token;","import React, { Component } from \"react\";\nimport \"./index.css\"\nclass CreateForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            amount: null,\n            delegates: [],\n            metadata: null,\n            notOwner: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addNewDelegateField = this.addNewDelegateField.bind(this);\n\n    }\n\n    async componentDidMount() {\n        //compare users address to owner, see if it matches\n        let ownerAddress = await this.props.contract.owner()\n        console.log(ownerAddress)\n\n        if (window.ethereum.selectedAddress.toLowerCase() !== ownerAddress.toLowerCase()) {\n            this.setState({ notOwner: true });\n        }\n    }\n\n    handleChange(event) {\n        if (event.target.name === \"delegates\") {\n            let delegates = [event.target.value]\n            this.setState({ delegates });\n\n        } else {\n            this.setState({ [event.target.name]: event.target.value });\n        }\n    }\n\n    addNewDelegateField() {\n        console.log(\"adding new delegate\")\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.submitTransaction()\n    }\n    submitTransaction = async () => {\n        const { amount, delegates, metadata } = this.state\n        delegates.push(window.ethereum.selectedAddress)\n        await this.props.contract.createCertificateType(amount, delegates, metadata)\n        document.getElementById(this.props.id).reset();\n    };\n\n\n    render() {\n        if (this.state.notOwner) {\n            return (<span className=\"form-warning\">You are not the owner of the contract {this.props.contract.address}</span>)\n        }\n        return (\n            <form id={this.props.id} onSubmit={this.handleSubmit}>\n                <br></br>\n                <label>\n                    Amount:\n            <input name=\"amount\" type=\"number\" onChange={this.handleChange} />\n                </label>\n                <br></br>\n\n                <label>\n                    Metadata:\n            <input name=\"metadata\" type=\"text\" onChange={this.handleChange} />\n                </label>\n                <br></br>\n                {/* <label>\n                    Delegate:\n            <input name=\"delegates\" type=\"text\" onChange={this.handleChange} />\n                </label>\n                <div className=\"add-delegate-div\" onClick={this.addNewDelegateField}>\n                    <span>+</span>\n                </div>\n                <br></br> */}\n                <input type=\"submit\" value=\"Submit\" disabled={this.state.notOwner} />\n            </form>\n        );\n    }\n}\nexport default CreateForm;","import {ethers} from 'ethers';\n\n\nexport const decodeLogs = (logs, contractEventsInterface) => {\n    let result = []\n    for (let i = 0; i < logs.length; i++) {\n        const log = logs[i];\n        let cleaned = {};\n        let decoded = contractEventsInterface.decode(\n            log.data,\n            log.topics\n        );\n        contractEventsInterface.inputs.forEach((input, i) => {\n            if (input.type.startsWith(\"uint\")) {\n                let x = decoded[input.name];\n                cleaned[input.name] = x.toString();\n            } else {\n                cleaned[input.name] = decoded[input.name];\n            }\n        });\n        log.decoded = cleaned;\n        result.push(decoded)\n    }\n    return result\n}\n\nexport const arrayify = ethers.utils.arrayify","import React, { Component } from \"react\";\nimport { decodeLogs, arrayify } from \"../../../web3/web3Utils\";\n\nimport \"./index.css\"\nclass CreateForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            amount: null,\n            metadata: null,\n            notOwner: false,\n            recipient: null,\n            certificates: [],\n            selectedCertificateId: null,\n            signedCertificate: {},\n            isCertSigned: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.downloadCert = this.downloadCert.bind(this);\n\n    }\n\n    async componentDidMount() {\n\n        this.getLogs()\n\n        let ownerAddress = await this.props.contract.owner()\n\n        if (window.ethereum.selectedAddress.toLowerCase() !== ownerAddress.toLowerCase()) {\n            this.setState({ notOwner: true });\n        }\n    }\n\n    async getLogs() {\n        let filter = this.props.contract.filters.CertificateTypeCreated();\n        filter.fromBlock = 0\n\n        let logs = await this.props.provider.getLogs(filter)\n        let contractEventInterface = this.props.contract.interface.events['CertificateTypeCreated']\n        let decodedLogs = decodeLogs(logs, contractEventInterface)\n\n        console.log(\"decodedLogs\", decodedLogs)\n        let certificates = []\n        for (let i = 0; i < decodedLogs.length; i++) {\n            const log = decodedLogs[i];\n            let dataString = await this.props.contract.getCertificateData(log.id)\n            console.log(dataString, log.amount.toString())\n            let cert = { id: log.id, amount: log.amount.toString(), meta: dataString, delegates: log.delegates }\n            certificates.push(cert)\n        }\n        this.setState({ certificates })\n\n        this.getDelegateSelector()\n    }\n\n    handleChange(event) {\n        // console.log(\"event\",event.target.name, event.target.value)\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    addNewDelegateField() {\n        console.log(\"adding new delegate\")\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.submitTransaction()\n    }\n    submitTransaction = async () => {\n        if (this.state.selectedCertificateId) {\n            let cHash = await this.props.contract.getCertificateHash(this.state.selectedCertificateId, this.state.recipient)\n            const certHashBytes = arrayify(cHash);\n            let signature = await this.props.signer.signMessage(certHashBytes)\n            let signedCertificate = {signature, address: this.props.contract.address, recipient: this.state.recipient, certificateId: this.state.selectedCertificateId }\n            console.log(signedCertificate)\n            this.setState({signedCertificate, isCertSigned: true})\n        } else {\n            alert(\"No valid cert selected\")\n        }\n        document.getElementById(this.props.id).reset();\n    };\n\n    downloadCert() {\n        if (!this.state.isCertSigned) {\n            alert(\"cert not valid\")\n            return\n        }\n        const blob = new Blob([ JSON.stringify(this.state.signedCertificate) ], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n\n        console.log(\"blob url\",url)\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = this.state.signedCertificate.certificateId || 'download';\n        a.click();\n    }\n\n    getDelegateSelector() {\n        const { certificates } = this.state\n        let selectorList = []\n        for (let i = 0; i < certificates.length; i++) {\n            const c = certificates[i];\n            let delegate = c.delegates.filter(d => d.toLowerCase() === window.ethereum.selectedAddress.toLowerCase())\n            if (delegate > 0) {\n                selectorList.push(c)\n            }\n        }\n        console.log(\"selectorList\", selectorList)\n\n        return (\n            <select name=\"selectedCertificateId\" onChange={this.handleChange}>\n                <option key={\"-1\"} value={\"\"}>Please select a certificate...</option>\n\n                {selectorList.map((cert, idx) => {\n                    if (cert) {\n                        return (\n                            <option key={idx} value={cert.id}>{cert.meta} - {cert.amount}</option>\n                        )\n                    } else return null\n\n                })}\n            </select>\n        );\n    }\n\n    displayCert() {\n\n    }\n\n\n\n    render() {\n        if (this.state.certificates.length == 0) {\n            return (<span className=\"form-warning\">You are not a delegate for any certificates on contract {this.props.contract.address}</span>)\n        }\n        return (\n            <div>\n                <form id={this.props.id} onSubmit={this.handleSubmit}>\n                    <label>\n                        Certificate:\n                    {this.getDelegateSelector()}\n                    </label>\n                    <br></br>\n\n                    <label>\n                        Recipient:\n                <input name=\"recipient\" type=\"text\" onChange={this.handleChange} />\n                    </label>\n                    <br></br>\n\n                    <input type=\"submit\" value=\"Create Certificate\" disabled={this.state.notOwner} />\n                </form>\n                {\n                    this.state.isCertSigned ? <div><pre><code>{JSON.stringify(this.state.signedCertificate, 0, 2)}</code></pre><button onClick={this.downloadCert}>Download Certificate</button> </div>: null\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default CreateForm;","import React, { Component } from 'react'\nimport './index.css'\n\nclass Dropzone extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { hightlight: false }\n    this.fileInputRef = React.createRef()\n\n    this.openFileDialog = this.openFileDialog.bind(this)\n    this.onFilesAdded = this.onFilesAdded.bind(this)\n    this.onDragOver = this.onDragOver.bind(this)\n    this.onDragLeave = this.onDragLeave.bind(this)\n    this.onDrop = this.onDrop.bind(this)\n  }\n\n  openFileDialog() {\n    if (this.props.disabled) return\n    this.fileInputRef.current.click()\n  }\n\n  onFilesAdded(evt) {\n      console.log(\"fac\")\n    if (this.props.disabled) return\n    this.setState({ addedhightlight: true })\n\n    const files = evt.target.files\n    console.log(files)\n    if (this.props.onFilesAdded) {\n      const array = this.fileListToArray(files)\n      this.props.onFilesAdded(array)\n    }\n  }\n\n  onDragOver(evt) {\n    evt.preventDefault()\n\n    if (this.props.disabled) return\n\n    this.setState({ hightlight: true })\n  }\n\n  onDragLeave() {\n    this.setState({ hightlight: false })\n  }\n\n  onDrop(event) {\n    event.preventDefault()\n\n    if (this.props.disabled) return\n\n    this.setState({ addedhightlight: true })\n\n    const files = event.dataTransfer.files\n    if (this.props.onFilesAdded) {\n      const array = this.fileListToArray(files)\n      this.props.onFilesAdded(array)\n    }\n    this.setState({ hightlight: false })\n  }\n\n  fileListToArray(list) {\n    const array = []\n    for (var i = 0; i < list.length; i++) {\n      array.push(list.item(i))\n    }\n    return array\n  }\n\n  render() {\n    return (\n      <div\n        className={`Dropzone ${this.state.hightlight ? 'Highlight' : ''}  ${this.state.addedhightlight ? 'Added-Highlight' : ''} `}\n        onDragOver={this.onDragOver}\n        onDragLeave={this.onDragLeave}\n        onDrop={this.onDrop}\n        onClick={this.openFileDialog}\n        style={{ cursor: this.props.disabled ? 'default' : 'pointer' }}\n      >\n        <input\n          ref={this.fileInputRef}\n          className=\"FileInput\"\n          type=\"file\"\n          onChange={this.onFilesAdded}\n        />\n        <img\n          alt=\"upload\"\n          className=\"Icon\"\n        //   src=\"/uploadIcon.svg\"\n        src={ this.state.addedhightlight ? '/uploadComplete.svg' : '/uploadIcon.svg'}\n        />\n        <span>Upload Files</span>\n      </div>\n    )\n  }\n}\n\nexport default Dropzone","import React, { Component } from \"react\";\nimport Dropzone from \"../../Dropzone\"\nclass CreateForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            amount: null,\n            certJson: {},\n            successfullyUploaded: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFileDrop = this.handleFileDrop.bind(this);\n    }\n\n    async componentDidMount() {\n\n    }\n\n    handleChange(event) {\n        try {\n            if (event.target.name === \"certJsonTextArea\") {\n                const cert = JSON.parse(event.target.value)\n                const { signature, address, recipient, certificateId } = cert\n                console.log(cert)\n                //todo patter match here\n            }\n            this.setState({ [event.target.name]: event.target.value });\n        } catch (err) {\n            console.log(err)\n        }\n\n\n    }\n\n    async handleFileDrop(files) {\n        console.log(files)\n        let file = files[0]\n        let s = await file.text()\n        console.log(s)\n        let json = JSON.parse(s)\n\n        this.setState({ certJsonTextArea: JSON.stringify(json, 0, 2) })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.submitTransaction()\n    }\n\n    submitTransaction = async () => {\n        const { certJsonTextArea } = this.state\n        const cert = JSON.parse(certJsonTextArea)\n        const { signature, address, recipient, certificateId } = cert\n\n        await this.props.contract.redeemCertificate(signature, certificateId)\n        document.getElementById(this.props.id).reset();\n    };\n\n\n    render() {\n        if (this.state.notOwner) {\n            return (<span className=\"form-warning\">You are not the owner of the contract {this.props.contract.address}</span>)\n        }\n        return (\n            <form id={this.props.id} onSubmit={this.handleSubmit}>\n                <Dropzone\n                    onFilesAdded={this.handleFileDrop}\n                    disabled={this.state.successfullyUploaded}\n                />\n                <label>\n                    Certificate JSON:\n                </label>\n                <br></br>\n                <textarea name=\"certJsonTextArea\" value={this.state.certJsonTextArea} rows=\"10\" cols=\"100\" onChange={this.handleChange} />\n\n                <br></br>\n                <input type=\"submit\" value=\"Redeem Certificate\" />\n            </form>\n        );\n    }\n}\nexport default CreateForm;","import React, { Component } from \"react\";\nimport { MyWeb3Consumer } from \"../../web3/EthersContext\"\nimport { ethers } from 'ethers';\nimport getContracts from \"../../web3/getContracts\";\nimport TokenMeta from \"../../components/TokenMeta\"\nimport CreateCertificateType from \"../../components/forms/CreateCertificateType\"\nimport CreateCertificate from \"../../components/forms/CreateCertificate\"\nimport RedeemCertificate from \"../../components/forms/RedeemCertificate\"\nimport {getLocalStorageArray} from \"../../utils/localStorage\"\n\nimport \"./index.css\"\n\n\nclass Token extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      contract: null,\n      contractLoaded: false,\n      loadingMessage: \"\",\n      symbol: null,\n      name: null,\n      supply: null,\n      owner: null,\n      balance: null\n    };\n  }\n  setLoaded() {\n    this.setState({\n      contractLoaded: true\n    })\n  }\n\n  componentDidMount = async () => {\n    this.loadContract()\n  }\n\n  async loadContract() {\n    try {\n      console.log(\"loading contract\")\n      let provider = this.props.provider\n\n      let templateCode = await provider.getCode(this.props.templateAddress)\n      let code = await provider.getCode(this.props.tokenAddress)\n\n      let contracts = getContracts(this.props.networkId)\n      const exampleCoinJSON = contracts.exampleCoin\n\n      if (templateCode !== code) {\n        let loadingMessage = \"deployed contract code does not match example coin contract\"\n        throw loadingMessage;\n      }\n      let contract = new ethers.Contract(this.props.tokenAddress, exampleCoinJSON.abi, this.props.signer);\n      let owner = await contract.owner()\n\n      this.setState({ contract, owner }, this.setLoaded)\n    } catch (err) {\n      console.log(err)\n      this.setState({ loadingMessage: err.toString() })\n    }\n  }\n\n  render() {\n    if (!this.state.contract) {\n      return (<div>{this.state.loadingMessage}</div>)\n    }\n    return (\n      <div>\n        <div className=\"token-box-div\">\n          <h3>Token Data</h3>\n          <TokenMeta contract={this.state.contract} />\n        </div>\n        <div className=\"token-box-div\">\n          <h3>Create Certificate Type (admin only)</h3>\n          <CreateCertificateType id=\"create-cert-type-form\" contract={this.state.contract} />\n        </div>\n        <div className=\"token-box-div\">\n          <h3>Create Certificate (delegate only)</h3>\n          <CreateCertificate id=\"create-cert-form\" contract={this.state.contract} provider={this.props.provider} signer={this.props.signer} />\n        </div>\n        <div className=\"token-box-div\">\n          <h3>Redeem Certificate</h3>\n          <RedeemCertificate id=\"redeem-cert-form\" contract={this.state.contract} provider={this.props.provider} signer={this.props.signer} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nclass ChooseToken extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectorTokens: [],\n      coinABI: null,\n      selectorTokenChoice: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.afterMount = this.afterMount.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  async componentDidMount() {\n    let abi = this.props.exampleCoin.interface.abi\n    this.setState({coinABI: abi}, this.afterMount)\n  }\n  \n  afterMount() {\n    this.addToken(this.props.exampleCoin.address)\n    let tokenAddressArray = getLocalStorageArray(\"CERTIFICATE_TOKEN_LIST\")\n    console.log(tokenAddressArray)\n    tokenAddressArray.forEach(t => {\n      this.addToken(t)\n    });\n  }\n\n  async addToken(address) {\n    \n    let contract = new ethers.Contract(address, this.state.coinABI, this.props.provider);\n    let symbol = await contract.symbol()\n    let name = await contract.name()\n\n    let token = {address, name, symbol}\n    console.log(token)\n    this.setState({ selectorTokens: [...this.state.selectorTokens, token] })\n  }\n\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    window.location.href = `/token/${this.state.selectorTokenChoice}`;\n  }\n\n  getSelector() {\n    const { selectorTokens } = this.state\n\n\n    return (\n      <select name=\"selectorTokenChoice\" onChange={this.handleChange}>\n        <option key={\"-1\"} value={\"\"}>Please select a token...</option>\n\n        {selectorTokens.map((token, idx) => {\n          if (token) {\n            return (\n              <option key={idx} value={token.address}>{token.name} - {token.symbol} - {token.address}</option>\n            )\n          } else return null\n\n        })}\n      </select>\n    );\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h2>Token Finder</h2>\n        <form onSubmit={this.handleSubmit}>\n        {this.getSelector()}\n        <br></br>\n        <input type=\"submit\" value=\"Go to Token\" />\n\n        </form>\n\n        <br></br>\n        <br></br>\n      </div>\n    )\n  }\n}\n\n\nconst TokenConsumer = (props) => (\n  <MyWeb3Consumer>\n    {({ loaded, networkId, signer, provider, exampleCoinContract }) => {\n      if (!loaded) {\n        return (<div>Loading form</div>)\n      }\n      if (!props.tokenId) {\n        return <ChooseToken  exampleCoin={exampleCoinContract} provider={provider} />\n      }\n      return (\n        <div className=\"token-page\">\n          <h1>Token Page</h1>\n          <Token tokenAddress={props.tokenId} templateAddress={exampleCoinContract.address} networkId={networkId} signer={signer} provider={provider} />\n        </div>\n      )\n    }}\n  </MyWeb3Consumer>\n);\n\n\nexport default TokenConsumer;","import React from 'react';\nimport Header from './layout/Header';\nimport Footer from './layout/Footer';\n\nimport './App.css';\nimport { Router } from \"@reach/router\"\nimport Home from \"./pages/Home\"\nimport TokenList from \"./pages/TokenList\"\nimport Deploy from \"./pages/Deploy\"\nimport TokenPage from \"./pages/Token\"\nimport { MyWeb3Provider } from \"./web3/EthersContext\"\nfunction App() {\n  return (\n    <div className=\"app-class\">\n      <MyWeb3Provider>\n        <Header />\n        <Router>\n          <Home path=\"/\" />\n          <TokenList path=\"/list\" />\n          <Deploy path=\"/deploy\" />\n          <TokenPage path=\"/token\" />\n          <TokenPage path=\"/token/:tokenId\" />\n        </Router>\n        <Footer />\n      </MyWeb3Provider>\n    </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}